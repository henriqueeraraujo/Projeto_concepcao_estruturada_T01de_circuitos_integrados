// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/06/2022 17:17:30"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          relogio_digital
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module relogio_digital_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
// wires                                               
wire [3:0] bcd_h_lsd;
wire [1:0] bcd_h_msd;
wire [3:0] bcd_m_lsd;
wire [2:0] bcd_m_msd;
wire [3:0] bcd_s_lsd;
wire [2:0] bcd_s_msd;
wire [6:0] h_lsd;
wire [6:0] h_msd;
wire [6:0] m_lsd;
wire [6:0] m_msd;
wire [6:0] s_lsd;
wire [6:0] s_msd;

// assign statements (if any)                          
relogio_digital i1 (
// port map - connection between master ports and signals/registers   
	.bcd_h_lsd(bcd_h_lsd),
	.bcd_h_msd(bcd_h_msd),
	.bcd_m_lsd(bcd_m_lsd),
	.bcd_m_msd(bcd_m_msd),
	.bcd_s_lsd(bcd_s_lsd),
	.bcd_s_msd(bcd_s_msd),
	.clock(clock),
	.h_lsd(h_lsd),
	.h_msd(h_msd),
	.m_lsd(m_lsd),
	.m_msd(m_msd),
	.reset(reset),
	.s_lsd(s_lsd),
	.s_msd(s_msd)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #100 1'b1;
	#100;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #40000 1'b1;
end 
endmodule

